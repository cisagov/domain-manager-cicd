name: Sandbox Deploy

on:
  pull_request:
    branches: [develop]
  push:
    branches: [develop]
  repository_dispatch:
    types: [deploy]

env:
  ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  ECR_URI: ${{ secrets.ECR_URI }}
  ENVIRONMENT: dev
  REGION: us-east-1

jobs:
  build_ui:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: domain-manager-ui
    environment:
      name: develop
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/domain-manager-ui
      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build Docker Image
        run: docker build -t $IMAGE_REPO:${{steps.vars.outputs.tag}} .
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Tag Docker Image
        run: docker tag $IMAGE_REPO:${{steps.vars.outputs.tag}} $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI/$IMAGE_REPO
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Push Docker Image
        run: docker push $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}

  build_api:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: domain-manager-api
    environment:
      name: develop
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/domain-manager-api
      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build Docker Image
        run: docker build -t $IMAGE_REPO:${{steps.vars.outputs.tag}} .
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Tag Docker Image
        run: docker tag $IMAGE_REPO:${{steps.vars.outputs.tag}} $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI/$IMAGE_REPO
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Push Docker Image
        run: docker push $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}

  terraform:
    runs-on: ubuntu-latest
    needs: [build_ui, build_api]
    environment:
      name: develop

    steps:
      # Checkout api for building lambda function
      - uses: actions/checkout@v2
        with:
          repository: cisagov/domain-manager-api
          path: domain-manager-api

      # Checkout cicd repo for running terraform
      - uses: actions/checkout@v2
        with:
          path: domain-manager-cicd

      # Install Terraform
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.3
      - name: Verify Terraform version
        run: terraform --version

      # Install python 3.8 for installing lambda layer
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Upgrade Pip
        run: pip install --upgrade pip

      # Install Lambda Layer
      - name: Install Python Requirements
        run: |
          mkdir ./domain-manager-cicd/terraform/layer
          mkdir ./domain-manager-cicd/terraform/layer/python
          pip install -r ./domain-manager-api/requirements.txt -t ./domain-manager-cicd/terraform/layer/python

      # Initialize Terraform
      - name: Terraform init
        working-directory: ./domain-manager-cicd/terraform
        run: terraform init -input=false

      # Select terraform workspace
      - name: Terraform Workspace
        working-directory: ./domain-manager-cicd/terraform
        run: |
          terraform workspace select $ENVIRONMENT
          terraform workspace show

      # Validate Terraform
      - name: Terraform validation
        working-directory: ./domain-manager-cicd/terraform
        run: terraform validate

      # Sometimes this just needs run again...
      - name: Terraform init 2
        working-directory: ./domain-manager-cicd/terraform
        run: terraform init -input=false

      # Plan terraform
      - name: Terraform Plan
        working-directory: ./domain-manager-cicd/terraform
        run: |
          terraform plan \
            -input=false \
            -var-file ./vars/$ENVIRONMENT.tfvars \
            -var="account_id=$ACCOUNT_ID" \
            -var="api_image_tag=${{needs.build_api.outputs.tag}}" \
            -var="ui_image_tag=${{needs.build_ui.outputs.tag}}" \
            -var="deployed_date=$(date)"

      # Apply terraform
      - name: Terraform Apply
        working-directory: ./domain-manager-cicd/terraform
        run: |
          terraform apply \
            -input=false -auto-approve \
            -var-file ./vars/$ENVIRONMENT.tfvars \
            -var="account_id=$ACCOUNT_ID" \
            -var="api_image_tag=${{needs.build_api.outputs.tag}}" \
            -var="ui_image_tag=${{needs.build_ui.outputs.tag}}" \
            -var="deployed_date=$(date)"
        if: ${{ github.event_name != 'pull_request' }}
