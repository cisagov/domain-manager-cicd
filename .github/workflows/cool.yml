name: COOL Deploy
on:
  pull_request:
    branches: [develop]
  push:
    branches: [develop]
  repository_dispatch:
    types: [deploy, cool_staging, cool_production]

env:
  # COOL Account IDs
  PRODUCTION_ACCOUNT_ID: ${{ secrets.COOL_AWS_PRODUCTION_ACCOUNT_ID }}
  STAGING_ACCOUNT_ID: ${{ secrets.COOL_AWS_STAGING_ACCOUNT_ID }}

  # Shared Services Account IDs
  SHARED_SERVICES_PRODUCTION_ACCOUNT_ID: ${{ secrets.COOL_SHARED_SERVICES_PRODUCTION_ACCOUNT_ID }}
  SHARED_SERVICES_STAGING_ACCOUNT_ID: ${{ secrets.COOL_SHARED_SERVICES_STAGING_ACCOUNT_ID }}

  # Github repositories
  API_IMAGE_REPO: domain-manager-api
  UI_IMAGE_REPO: domain-manager-ui

  # Booleans
  IS_STAGING: ${{ github.event_name == 'push' || github.event.action == 'cool_staging' || github.event.action == 'deploy' }}
  IS_PRODUCTION: ${{ github.event.action == 'cool_production' }}
  IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
  BUILD_UI: github.event.client_payload.trigger == env.UI_IMAGE_REPO || github.event.action == 'cool_production'
  BUILD_API: github.event.client_payload.trigger == env.API_IMAGE_REPO || github.event.action == 'cool_production'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Install Terraform
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.30

      # Verify Terraform version
      - name: Verify Terraform version
        run: terraform --version

      # Checkout cicd repo
      - uses: actions/checkout@v2
        with:
          path: cicd

      # Checkout UI repo
      - uses: actions/checkout@v2
        with:
          path: ui
          repository: cisagov/domain-manager-ui

      # Checkout API repo
      - uses: actions/checkout@v2
        with:
          path: api
          repository: cisagov/domain-manager-api

      # Set default AWS credentials
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.COOL_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.COOL_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Output metadata
      - name: Echo Metadata
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.event.action }}

      # Set production environment
      - name: Set production environment
        run: |
          echo "ACCOUNT_ID=$PRODUCTION_ACCOUNT_ID" >> $GITHUB_ENV
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SHARED_SERVICES_ACCOUNT_ID=$SHARED_SERVICES_STAGING_ACCOUNT_ID" >> $GITHUB_ENV
        if: env.IS_PRODUCTION == 'true'

      # Set staging environment
      - name: Set staging environment
        run: |
          echo "ACCOUNT_ID=$STAGING_ACCOUNT_ID" >> $GITHUB_ENV
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SHARED_SERVICES_ACCOUNT_ID=$SHARED_SERVICES_STAGING_ACCOUNT_ID" >> $GITHUB_ENV
        if: env.IS_STAGING == 'true' || env.IS_PULL_REQUEST == 'true'

      # Set environment
      - name: Set environment
        run: |
          echo "ASSUME_ROLE=arn:aws:iam::$ACCOUNT_ID:role/ProvisionAccount" >> $GITHUB_ENV
          echo "ECR_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com" >> $GITHUB_ENV

      # Get UI tag
      - name: Get UI Tag
        id: ui_tag
        run: echo "UI_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        working-directory: ./ui/

      # Build UI
      - name: Build UI
        run: docker build -t $UI_IMAGE_REPO:$UI_TAG .
        if: env.BUILD_UI == 'true'
        working-directory: ./ui/

      # Tag UI
      - name: Tag UI
        run: docker tag $UI_IMAGE_REPO:$UI_TAG $ECR_URI/$UI_IMAGE_REPO:$UI_TAG
        if: env.BUILD_UI == 'true'
        working-directory: ./ui/

      # Get API tag
      - name: Get API Tag
        run: echo "API_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        working-directory: ./api/

      # Build API
      - name: Build API
        run: docker build -t $API_IMAGE_REPO:$API_TAG .
        if: env.BUILD_API == 'true'
        working-directory: ./api/

      # Tag API
      - name: Tag API
        run: docker tag $IMAGE_REPO:$API_TAG $ECR_URI/$IMAGE_REPO:$API_TAG
        if: env.BUILD_API == 'true'
        working-directory: ./api/

      # Assume provision account role
      - name: Assume provision account role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ env.ASSUME_ROLE }}
          role-skip-session-tagging: true

      # Confirm assumed role
      - name: Confirm Assumed Role
        run: aws sts get-caller-identity

      # Login to ECR
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI

      # Push UI
      - name: Push UI
        run: docker push $ECR_URI/$UI_IMAGE_REPO:$UI_TAG
        if: env.BUILD_UI == 'true'

      # Push API
      - name: Push API
        run: docker push $ECR_URI/$API_IMAGE_REPO:$API_TAG
        if: env.BUILD_API == 'true'

      # Set default AWS credentials
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.COOL_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.COOL_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Initialize Terraform
      - name: Terraform init
        working-directory: ./cicd/cool
        run: terraform init -input=false
      
      # Select terraform workspace
      - name: Terraform Workspace
        working-directory: ./cicd/cool
        run: |
          terraform workspace select $ENVIRONMENT
          terraform workspace show

      # Validate Terraform
      - name: Terraform validation
        working-directory: ./cicd/cool
        run: terraform validate

      # Sometimes this just needs run again...
      - name: Terraform init 2
        working-directory: ./cicd/cool
        run: terraform init -input=false

      # Plan terraform
      - name: Terraform Plan
        working-directory: ./cicd/cool
        run: |
          terraform plan \
            -input=false \
            -var-file ./vars/$ENVIRONMENT.tfvars \
            -var="api_image_tag=$API_TAG" \
            -var="ui_image_tag=$UI_TAG" \
            -var="account_id=$ACCOUNT_ID" \
            -var="shared_services_account_id=$SHARED_SERVICES_ACCOUNT_ID"

      # Test terraform
      - name: Test
        run: echo "Applying terraform"
        if: env.IS_PULL_REQUEST == 'false'
      # Apply terraform
      # - name: Terraform Apply
      #   working-directory: ./cicd/cool
      #   run: |
      #     terraform apply \
      #       -input=false \
      #       -auto-approve \
      #       -var-file ./vars/$ENVIRONMENT.tfvars \
      #       -var="api_image_tag=$API_TAG" \
      #       -var="ui_image_tag=$UI_TAG" \
      #       -var="account_id=$ACCOUNT_ID" \
      #       -var="shared_services_account_id=$SHARED_SERVICES_ACCOUNT_ID"
