name: COOL Deploy
on:
  push:
    branches: [develop]
  repository_dispatch:
    types: [deploy, cool_staging, cool_production]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.COOL_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.COOL_AWS_SECRET_ACCESS_KEY }}
  PRODUCTION_ACCOUNT_ID: ${{ secrets.COOL_AWS_PRODUCTION_ACCOUNT_ID }}
  STAGING_ACCOUNT_ID: ${{ secrets.COOL_AWS_STAGING_ACCOUNT_ID }}
  REGION: us-east-1
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1

jobs:
  setenv:
    runs-on: ubuntu-latest
    outputs:
      ACCOUNT_ID: ${{ steps.env.outputs.ACCOUNT_ID }}
      ENVIRONMENT: ${{ steps.env.outputs.ENVIRONMENT }}
      ASSUME_ROLE: ${{ steps.env.outputs.ASSUME_ROLE }}
      ECR_URI: ${{ steps.env.outputs.ECR_URI }}
    steps:
      - uses: actions/checkout@v2
      - name: Echo Metadata
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.event.action }}
      - name: Set Production
        run: |
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "ACCOUNT_ID=$PRODUCTION_ACCOUNT_ID" >> $GITHUB_ENV
        if: github.event.action == 'cool_production'
      - name: Set Staging
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "ACCOUNT_ID=$STAGING_ACCOUNT_ID" >> $GITHUB_ENV
        if: github.event_name == 'push' || github.event.action == 'cool_staging' || github.event.action == 'deploy'
      - name: Set Environment
        run: |
          echo ::set-output name=ACCOUNT_ID::$(echo "$ACCOUNT_ID")
          echo ::set-output name=ENVIRONMENT::$ENVIRONMENT
          echo ::set-output name=ASSUME_ROLE::$(echo "arn:aws:iam::$ACCOUNT_ID:role/ProvisionAccount")
          echo ::set-output name=ECR_URI::$(echo "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com")
        id: env

  build_ui:
    runs-on: ubuntu-latest
    needs: [setenv]
    env:
      ENVIRONMENT: ${{ needs.setenv.outputs.ENVIRONMENT }}
      ASSUME_ROLE: ${{ needs.setenv.outputs.ASSUME_ROLE }}
      ECR_URI: ${{ needs.setenv.outputs.ECR_URI }}
      IMAGE_REPO: domain-manager-ui
    outputs:
      tag: ${{ steps.vars.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/domain-manager-ui
      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build Docker Image
        run: docker build -t $IMAGE_REPO:${{steps.vars.outputs.tag}} .
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Tag Docker Image
        run: docker tag $IMAGE_REPO:${{steps.vars.outputs.tag}} $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Assume Provision Account Role
        run: |
          JSON=$(aws sts assume-role --role-arn $ASSUME_ROLE --role-session-name $IMAGE_REPO-github-actions --duration 900)
          echo AWS_ACCESS_KEY_ID=$(echo ${JSON} | jq --raw-output ".Credentials[\"AccessKeyId\"]") >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY=$(echo ${JSON} | jq --raw-output ".Credentials[\"SecretAccessKey\"]") >> $GITHUB_ENV
          echo AWS_SESSION_TOKEN=$(echo ${JSON} | jq --raw-output ".Credentials[\"SessionToken\"]") >> $GITHUB_ENV
          echo AWS_EXPIRATION=$(echo ${JSON} | jq --raw-output ".Credentials[\"Expiration\"]") >> $GITHUB_ENV
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Confirm Assumed Role
        run: aws sts get-caller-identity
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI/$IMAGE_REPO
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Push Docker Image
        run: docker push $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'

  build_api:
    runs-on: ubuntu-latest
    needs: [setenv]
    env:
      ENVIRONMENT: ${{ needs.setenv.outputs.ENVIRONMENT }}
      ASSUME_ROLE: ${{ needs.setenv.outputs.ASSUME_ROLE }}
      ECR_URI: ${{ needs.setenv.outputs.ECR_URI }}
      IMAGE_REPO: domain-manager-api
    outputs:
      tag: ${{ steps.vars.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/domain-manager-api
      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build Docker Image
        run: docker build -t $IMAGE_REPO:${{steps.vars.outputs.tag}} .
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Tag Docker Image
        run: docker tag $IMAGE_REPO:${{steps.vars.outputs.tag}} $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Assume Provision Account Role
        run: |
          JSON=$(aws sts assume-role --role-arn $ASSUME_ROLE --role-session-name $IMAGE_REPO-github-actions --duration 900)
          echo AWS_ACCESS_KEY_ID=$(echo ${JSON} | jq --raw-output ".Credentials[\"AccessKeyId\"]") >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY=$(echo ${JSON} | jq --raw-output ".Credentials[\"SecretAccessKey\"]") >> $GITHUB_ENV
          echo AWS_SESSION_TOKEN=$(echo ${JSON} | jq --raw-output ".Credentials[\"SessionToken\"]") >> $GITHUB_ENV
          echo AWS_EXPIRATION=$(echo ${JSON} | jq --raw-output ".Credentials[\"Expiration\"]") >> $GITHUB_ENV
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Confirm Assumed Role
        run: aws sts get-caller-identity
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI/$IMAGE_REPO
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'
      - name: Push Docker Image
        run: docker push $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: github.event.client_payload.trigger == env.IMAGE_REPO || github.event.action == 'cool_production'

  terraform:
    runs-on: ubuntu-latest
    needs: [build_ui, build_api, setenv]
    env:
      ACCOUNT_ID: ${{ needs.setenv.outputs.ACCOUNT_ID }}
      ENVIRONMENT: ${{ needs.setenv.outputs.ENVIRONMENT }}
    steps:

      # Checkout domain-manager repo for running terraform
      - uses: actions/checkout@v2
        with:
          path: domain-manager

      # Install Terraform
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.30
      - name: Verify Terraform version
        run: terraform --version

      # Initialize Terraform
      - name: Terraform init
        working-directory: ./domain-manager/cool
        run: terraform init -input=false

      # Select terraform workspace
      - name: Terraform Workspace
        working-directory: ./domain-manager/cool
        run: |
          terraform workspace select $ENVIRONMENT
          terraform workspace show

      # Validate Terraform
      - name: Terraform validation
        working-directory: ./domain-manager/cool
        run: terraform validate

      # Sometimes this just needs run again...
      - name: Terraform init 2
        working-directory: ./domain-manager/cool
        run: terraform init -input=false

      # terraform plan
      - name: Terraform Plan
        working-directory: ./domain-manager/cool
        run: |
          terraform plan \
            -input=false \
            -var-file ./vars/$ENVIRONMENT.tfvars \
            -var="api_image_tag=${{needs.build_api.outputs.tag}}" \
            -var="ui_image_tag=${{needs.build_ui.outputs.tag}}" \
            -var="account_id=$ACCOUNT_ID"


      # terraform apply
      - name: Terraform Apply
        working-directory: ./domain-manager/cool
        run: |
          terraform apply \
            -input=false \
            -auto-approve \
            -var-file ./vars/$ENVIRONMENT.tfvars \
            -var="api_image_tag=${{needs.build_api.outputs.tag}}" \
            -var="ui_image_tag=${{needs.build_ui.outputs.tag}}" \
            -var="account_id=$ACCOUNT_ID"

