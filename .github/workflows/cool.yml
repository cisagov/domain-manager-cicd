name: COOL Deploy
on:
  pull_request:
    branches: [develop]
  push:
    branches: [develop]
  repository_dispatch:
    types: [deploy, cool_staging, cool_production]

env:
  REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.COOL_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.COOL_AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: 0.12.31

jobs:
  # Set Environment
  setenv:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Output metadata
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.event.action }}
      - name: Set staging environment
        run: echo "environment=staging" >> $GITHUB_ENV
        if: ${{ github.event.action != 'cool_production' }}

      - name: Set production environment
        run: echo "environment=production" >> $GITHUB_ENV
        if: ${{ github.event.action == 'cool_production' }}

      - name: Show environment
        run: echo "$environment"

      - name: Set outputs
        id: env
        run: echo ::set-output name=environment::$environment

  # Build and push image repositories
  build:
    runs-on: ubuntu-latest
    needs: [setenv]
    env:
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
    environment:
      name: ${{ needs.setenv.outputs.environment }}
    strategy:
      fail-fast: false
      matrix:
        repo: [domain-manager-api, domain-manager-ui]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/${{ matrix.repo }}
      
      - name: Set vars
        run: |
          echo "assume_role=arn:aws:iam::$ACCOUNT_ID:role/ProvisionAccount" >> $GITHUB_ENV
          echo "ecr_uri=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com" >> $GITHUB_ENV

      - name: Get Tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Display Tag
        run: echo "$tag"
      
      - name: Create Tag Artifact
        run: echo "$tag" > tag.txt

      - name: Upload Tag Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.repo }}
          path: tag.txt

      - name: Build
        run: docker build -t ${{ matrix.repo }}:$tag .
        if: ${{ github.event_name != 'pull_request' }}

      - name: Tag
        run: docker tag ${{ matrix.repo }}:$TAG $ecr_uri/${{ matrix.repo }}:$tag
        if: ${{ github.event_name != 'pull_request' }}

      - name: Assume provision account role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 1200
          role-to-assume: ${{ env.assume_role }}
          role-skip-session-tagging: true

      - name: Confirm Assumed Role
        run: aws sts get-caller-identity

      - name: Login to ECR
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ecr_uri

      - name: Push to ECR
        run: docker push $ecr_uri/${{ matrix.repo }}:$tag
        if: ${{ github.event_name != 'pull_request' }}

  # Run terraform
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: cool
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Download API Tag Files
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Store tags in environment variables
        run: |
          echo "ui_tag=$(cat artifacts/domain-manager-ui/tag.txt)" >> $GITHUB_ENV
          echo "api_tag=$(cat artifacts/domain-manager-api/tag.txt)" >> $GITHUB_ENV
      - name: Verify Terraform version
        run: terraform --version
      - name: Terraform init
        run: terraform init -input=false
        
      



  # deploy:
  #   runs-on: ubuntu-latest
  #   steps:

  #     # Initialize Terraform
  #     - name: Terraform init
  #       working-directory: ./cicd/cool
  #       run: terraform init -input=false
      
  #     # Select terraform workspace
  #     - name: Terraform Workspace
  #       working-directory: ./cicd/cool
  #       run: |
  #         terraform workspace select $ENVIRONMENT
  #         terraform workspace show

  #     # Validate Terraform
  #     - name: Terraform validation
  #       working-directory: ./cicd/cool
  #       run: terraform validate

  #     # Sometimes this just needs run again...
  #     - name: Terraform init 2
  #       working-directory: ./cicd/cool
  #       run: terraform init -input=false

  #     # Plan terraform
  #     - name: Terraform Plan
  #       working-directory: ./cicd/cool
  #       run: |
  #         terraform plan \
  #           -input=false \
  #           -var-file ./vars/$ENVIRONMENT.tfvars \
  #           -var="api_image_tag=$API_TAG" \
  #           -var="ui_image_tag=$UI_TAG" \
  #           -var="account_id=$ACCOUNT_ID" \
  #           -var="shared_services_account_id=$SHARED_SERVICES_ACCOUNT_ID"

  #     # Apply terraform
  #     - name: Terraform Apply
  #       working-directory: ./cicd/cool
  #       run: |
  #         terraform apply \
  #           -input=false \
  #           -auto-approve \
  #           -var-file ./vars/$ENVIRONMENT.tfvars \
  #           -var="api_image_tag=$API_TAG" \
  #           -var="ui_image_tag=$UI_TAG" \
  #           -var="account_id=$ACCOUNT_ID" \
  #           -var="shared_services_account_id=$SHARED_SERVICES_ACCOUNT_ID"
  #       if: env.IS_PULL_REQUEST == 'false'
